/********************************************************
Author: 			 			Lior Bondorevsky
Creation date: 			17/12/2014
Last modofied date: 19/12/2014
Description: 				FileServer Protocols implementation 
********************************************************/
#include <cstdio>   // sprintf, fwrite
#include <unistd.h> // read, write
#include <cstring>  // memset
#include <cassert>  // assert
#include <string>   // string

#include "fileserver_protocolos.h"

namespace adv_cpp
{

RepoProtocol::RepoProtocol(int _fd, int _id)
: m_fd(_fd),
  m_id(_id) 
{
  memset(&m_recvHeader, 0, sizeof(m_recvHeader));
}


bool RepoProtocol::MD5ChkSum(const char* _fileName)
{
  FILE* chkSumFile = NULL;
  
  static const char* CHKSUM_FILENAME = "md5_chk_sum.temp";
  
  assert(_fileName);
  
  std::string md5sum;
  md5sum = "md5sum " + _fileName + " > " + CHKSUM_FILENAME;
  system(md5sum.c_str());
  
  // Open checksum file 
  chkSumFile = fopen(CHKSUM_FILENAME, "r");
  if(!chkSumFile)
  {
    perror("fopen");
  }
  
  char result[MD5_SIZE];
  fread(result, sizeof(char), MD5_SIZE - 1, chkSumFile);
  if(ferror(chkSumFile))
  {
    perror("fread");
  }
  result[MD5_SIZE-1] = '\0';
  
  // Close server file 
  if(fclose(chkSumFile))
  {
  	perror("fclose");
  }
  
  std::string rmFile;
  rmFile = "rm " + CHKSUM_FILENAME;
  system(rmFile.c_str()); 
  
  return strcmp(result, m_recvHeader.m_checkSum) == 0;
}


bool RepoProtocol::Discovery(const char* _fileName)
{
  assert(_fileName);
  
  // Write DISCOVERY message 
  sprintf(m_data, "hello server! its client #%d", m_id);
  size_t dataLen = strlen(m_data) + 1;
  int bytesWritten = write(m_fd, m_data, dataLen);
  
  if(SYS_ERR == bytesWritten || bytesWritten != dataLen)
  {
    perror("write");
    return false;
  }
  
  // Recieve Header 
  if(SYS_ERR == read(m_fd, &m_recvHeader, sizeof(m_recvHeader)))    
  {
    perror("read");
    return false;
  }
  
  if(SYS_ERR == m_recvHeader.m_size)
  {
    printf("invalid file error\n");
    return false;
  }
  
  return Transfer(_fileName);
}


bool RepoProtocol::Transfer(const char* _fileName)
{
  assert(_fileName);
  
  size_t chunkCounter = 0;
  static size_t BUFFER_SIZE = 65536;
  char buffer[BUFFER_SIZE];
  ssize_t totBytesRead = 0;
  
  // Open filesList file 
  FILE* pFile = fopen(CLIENT_FILENAME, "wb");
	if(!pFile)
	{
		perror("fopen");
    return false;
	}
  
  // Breaks when fileSent or on read error
  while(true)
  {
    // Recieve file chunk 
    int currBytesRead = read(m_fd, buffer, sizeof(buffer));
    if(SYS_ERR == currBytesRead)    
    {
      perror("read");
      return false;
    }
    if(currBytesRead == 0)
    {
      printf("error: connection closed\n");
      return false;
    }
    
    printf("client recieved file chunk #%d\n", ++chunkCounter);
    
    fwrite(buffer, sizeof(char), currBytesRead, pFile);
    
    totBytesRead += currBytesRead;
    
    if(totBytesRead == m_recvHeader.m_size)
    {
      break;
    }
  }
  
  if(!MD5ChkSum(_fileName))
  {
    printf(stderr, "\nFile MD5 Checksum Failed!\n\n");
    return false;
  }
  printf("\nFile MD5 Checksum OK :)\n\n");
  
  // Close file 
  if(fclose(pFile))
  {
  	perror("fclose");
    return false;
  }
  
  return true;
}

} // namespace adv_cpp


