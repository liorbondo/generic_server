/*******************************************************************************************
Author: 			 			Lior Bondorevsky
Creation date: 			13/7/2014
Last modofied date: 28/8/2014
Description: 				Hash Table of Items, fixed table size & unlimited capacity (collisions)
Notes:							Hash & Compare functions provided by client. no Key duplication
********************************************************************************************/
#ifndef __HASH_H__
#define __HASH_H__

#include "adterr.h"

typedef struct Hash Hash;
typedef void*  HashKey;
typedef int 	 (*HashFunc)(HashKey, size_t);

/* Creates hash table of size_t. returns NULL if failed 
 * NOTES: set _capacity to +30% then needed for faster operation 
 * the chosen size will be changed to nearest prime number (better scattering) */
Hash* HashCreate(size_t, HashFunc, CompFunc);

/* Destroys entire Hash Table (not including Items) */
void HashDestroy(Hash*);

/* Insert new Item with Hashkey to Hash Table
 * NOTES: No Duplicates HashKeys (return ERR_DUPLICATION) */
ADTErr HashInsert(Hash*, HashKey, Item);

/* Returns the Item of the removed HashKey or NULL if key wasn't found */
Item HashRemove(Hash*, HashKey);

/* Returns the Item of the found HashKey or NULL otherwise */
Item HashFind(Hash*, HashKey);

/* Returns the current number of items in the Hash Table */
size_t HashCount(Hash*);

/* Returns the current number of used Buckets in the Hash Table */
size_t HashCountUsedBuckets(Hash*);

/* Perform specified DoFunc for each item in the
 * Hash Table until error is returned from the DoFunc
 * return 0 if DoFunc stops (error) or 1 if otherwise */
int	HashForEach(Hash*, DoFunc, Param);

#ifdef __DEBUG__

/* DEBUG ONLY: prints the Hash Table (char* items only) */ 
void HashPrint(Hash*);

#endif /* #ifdef __DEBUG__ */


#endif /* #ifndef __HASH_H__ */

